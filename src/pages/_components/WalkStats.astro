---
interface Props {
	walkData: {
		totalWalks: number;
		totalMiles: number;
	};
}

const { walkData } = Astro.props;
---

<section class="py-20 bg-alabaster-500">
	<div class="container mx-auto px-4">
		<div class="-mx-4 -mb-8 flex flex-wrap items-center">
			<div class="mb-8 w-full px-4 text-center md:w-1/2">
				<p
					id="total-walks-counter"
					class="mb-2 font-heading text-5xl font-bold text-cityscape-blue-500 lg:text-6xl"
					data-total-walks={walkData?.totalWalks}
				>
					{walkData?.totalWalks}
				</p>
				<p class="font-body text-lg text-cityscape-blue-900">Total Walks</p>
			</div>
			<div class="mb-8 w-full px-4 text-center md:w-1/2">
				<p
					id="total-miles-counter"
					class="mb-2 font-heading text-5xl font-bold text-sunset-orange-500 lg:text-6xl"
					data-miles-walked={walkData?.totalMiles}
				>
					{walkData?.totalMiles}
				</p>
				<p class="font-body text-lg text-cityscape-blue-900">Miles Walked</p>
			</div>
		</div>
	</div>
</section>

<script>
	import { CountUp } from "countup.js";

	document.addEventListener("DOMContentLoaded", () => {
		const totalWalksCounter = document.getElementById("total-walks-counter");
		const totalMilesCounter = document.getElementById("total-miles-counter");

		const totalWalks = parseInt(totalWalksCounter?.dataset.totalWalks || "0", 10);
		const totalMilesWalked = parseFloat(totalMilesCounter?.dataset.milesWalked || "0");

		const startAnimation = (element, endValue, options) => {
			const countUp = new CountUp(element, endValue, options);
			if (!countUp.error) {
				countUp.start();
			} else {
				console.error(`CountUp Error for ${element.id}: ${countUp.error}`);
			}
		};

		const observerOptions = {
			root: null,
			rootMargin: "0px",
			threshold: 0.1,
		};

		const observerCallback = (entries, observer) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					if (entry.target.id === "total-walks-counter") {
						startAnimation(entry.target, totalWalks, {
							duration: 2.5,
							useEasing: true,
							useGrouping: true,
						});
					} else if (entry.target.id === "total-miles-counter") {
						startAnimation(entry.target, totalMilesWalked, {
							decimalPlaces: 2,
							duration: 2.5,
							useEasing: true,
							useGrouping: true,
						});
					}
					observer.unobserve(entry.target);
				}
			});
		};

		const observer = new IntersectionObserver(observerCallback, observerOptions);

		if (totalWalksCounter) {
			observer.observe(totalWalksCounter);
		}

		if (totalMilesCounter) {
			observer.observe(totalMilesCounter);
		}
	});
</script>
